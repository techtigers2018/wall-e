// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc7196.TechTiger.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc7196.TechTiger.Robot;

/**
 *
 */
public class TeleopDrive extends Command {

	double speedPercent;
	boolean hasPassedMiddleSwitch = false;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public TeleopDrive() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	
    	double speed = Robot.oi.joystick.getRawAxis(1);
    	double turn = Robot.oi.joystick.getRawAxis(0);
    	
//    	if(increment < 0.3 && speed < 0.8 && speed >= 1)
//    	{
//    		increment += 0.05;
//    		speed += increment;
//    	}
    	
    	
    	if(Robot.elevator.getLimitSwitchMiddle().get())
    	{
    		speedPercent = 0.65;
    		hasPassedMiddleSwitch = !hasPassedMiddleSwitch;
    	}
    	
    	if(hasPassedMiddleSwitch)
    	{
    		if(Robot.elevator.getLimitSwitchHigh().get())
    		{
    			speedPercent = 0.50;
    			//speedPercent = 0.70; COMMENTED OUT JUST FOR TESTING PURPOSES
    		}
    	}
    	else
    	{
    		speedPercent = 0.80;
    	}
    	
    	double turnPercent;
    	if(Robot.elevator.getLimitSwitchHigh().get())
    	{
    		turnPercent = 0.65;
    	}
    	else
    	{
    		turnPercent = 0.80;
    	}
    	
    	Robot.driveTrain.drive(speed, turn, speedPercent, turnPercent);
    	SmartDashboard.putNumber("Robot Speed", speed * speedPercent);
    	SmartDashboard.putNumber("Turn", turn * turnPercent);
    	SmartDashboard.putBoolean("Past Middle", hasPassedMiddleSwitch);
    	//SmartDashboard.putNumber("Increment", increment);
    }
    
    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() 
    {
    	return true;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
